#!/bin/bash

echo "Executing \"$SERVICE_NAME\" as $USER in home directory \"$HOME\""

JACK_EXECUTABLE="$HOME/.jackdrc"
SPEAKERMAN_EXECUTABLE_NAME="speakerman"

case "$1" in 
	start)
		ACTION="start"
	;;
	stop)
		ACTION="stop"
	;;
	*)
	echo "Usage (as root): $0 (start|stop)" >&2
	exit 3
esac

# $1 PROGRAM
executable()
{
	# If which is not available then we must be running before
	# /usr is mounted on a system that has which in /usr/bin/.
	# Conclude that $1 is not executable.
	[ -x /bin/which ] || [ -x /usr/bin/which ] || return 1
	which "$1" >/dev/null 2>&1
}


if [ -f "$HOME/.jackdrc" ]
then
	read JACK_EXECUTABLE JACK_COMMANDLINE < "$HOME/.jackdrc"
	if ! executable "$JACK_EXECUTABLE"
	then
		echo "Cannot find $JACK_EXECUTABLE" >&2
		return 1
	fi
else
	echo "Cannot find jack startup file for user: $HOME/.jackdrc" >&2
	exit 1
fi

PATH="usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

if executable "$SPEAKERMAN_EXECUTABLE_NAME"
then
	SPEAKERMAN_EXECUTABLE=`which "$SPEAKERMAN_EXECUTABLE_NAME"`
else
	echo "Cannot find $SPEAKERMAN_EXECUTABLE_NAME" >&2
	return 1
fi

JACK_COMMAND="$JACK_EXECUTABLE $JACK_COMMANDLINE"

# $1: Executable name
# $2: signal
exec_signal() {
	PIDS=`pidof "$1"`
	if [ "$PIDS" == "" ] 
	then
		return 0
	fi
	if ! kill -$2 $PIDS
	then
		echo "Couldn't kill all processes ($1) with kill -$2 $PIDS" >&2
		return 1
	fi
}

# $1: Executable name
exec_await_terminated()
{
	ATTEMPT="0"
	PIDS=`pidof "$1"`
	while [ "$PIDS" != "" ]
	do
		sleep 1
		ATTEMPT=$(($ATTEMPT + 1))
		if [ $ATTEMPT -ge 2 ]
		then	
			return 1
		fi
		PIDS=`pidof "$1"`
	done
}

# $1: Executable name
exec_kill() {
	if ! executable "$1"
	then
		echo "Cannot find $1" >&2
		return 1
	fi
	if ! exec_signal "$1" TERM 
	then
		return 1
	fi
	if exec_await_terminated "$1"
	then
		return 0
	fi
	if ! exec_signal "$1" KILL
	then
		return 1
	fi
	if ! exec_await_terminated "$1"
	then
		return 1
	fi
}

jack_active() {
	if jack_wait -w -t 2 | grep -Ei '^timeout'
	then
		echo "Jack not active"
		return 1
	fi
	return 0;
}

jack_kill() {
	if ! exec_kill "$JACK_EXECUTABLE"
	then
		return 1
	fi	
}

jack_activate() {
	if ! jack_kill
	then
		return 1
	fi
	echo "Executing as $USER: $JACK_COMMAND"
	$JACK_COMMAND &
	disown

	if jack_wait -w -t 2 | grep -Ei '^timeout'
	then
		echo "Jack not active"
		return 1
	fi
	return 0
}

speakerman_activate() {
	if ! exec_kill "$SPEAKERMAN_EXECUTABLE"
	then
		return 1
	fi	
	echo "Executing as $USER: $SPEAKERMAN_EXECUTABLE"

	$SPEAKERMAN_EXECUTABLE &
	disown
	ATTEMPT="0"
	while ! wget --quiet  -O /dev/null "http://localhost:8088"
	do
		sleep 1
		ATTEMPT=$(($ATTEMPT + 1))
		if [ $ATTEMPT -ge 3 ]
		then	
			return 1
		fi
	done
	return 0
}

DBUS_LOCK="/tmp/.speakerman.dbus"

ensure_dbus() {
	if [ ! -f "$DBUS_LOCK" ] 
	then
		echo "Launching new DBUS"
		if ! dbus-launch | tee "$DBUS_LOCK"
		then
			echo "Cannot start DBUS" >&2
			exit 1
		fi
		. "$DBUS_LOCK"
	else
		. "$DBUS_LOCK"
		if [ -e /proc/$DBUS_SESSION_BUS_PID ] 
		then
			echo "Using running DBUS"
			cat "$DBUS_LOCK"
		else
			echo "Stale DBUS info; launching new DBUS"
			if ! dbus-launch | tee "$DBUS_LOCK"
			then
				echo "Cannot start dbus" >&2
				exit 1
			fi
			. "$DBUS_LOCK"
		fi
	fi
}

if [ "$ACTION" == "start" ]
then
	if ! ensure_dbus 
	then 
		exit 1
	fi
	export DBUS_SESSION_BUS_ADDRESS
	export DBUS_SESSION_BUS_PID
	if jack_activate && speakerman_activate
	then
		echo "Started"
	fi
else
	if exec_kill "$SPEAKERMAN_EXECUTABLE" 
	then
		jack_kill
		if [ -f "$DBUS_LOCK" ] 
		then
			. "$DBUS_LOCK"
			echo "Stopping DBUS with pid=$DBUS_SESSION_BUS_PID"
			kill -TERM $DBUS_SESSION_BUS_PID
			rm "$DBUS_LOCK"
		fi
	else
		exit 1
	fi
fi
