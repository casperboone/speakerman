#!/bin/bash

SPEAKERMAN_USER="speakerman"

JACK_CARD="0"
JACK_PORTS="1024"
JACK_RATE="96000"
JACK_SAMPLES_PERIOD="512"
JACK_PERIODS="2"
JACK_EXECUTABLE="jackd"

CONFIGFILE="/etc/speakerman/speakerman-setup.conf"
if test -f "$CONFIGFILE" 
then
    . "$CONFIGFILE"
fi

SPEAKERMAN_EXECUTABLE_NAME="speakerman"
SPEAKERMAN_LOG="/tmp/speakerman.log"
JACK_LOG="/tmp/jack.log"

ACTION=

check_root() {
    if [ "$EUID" == "0" ]
    then
		return 0
	fi
    echo "$0: Must be root to run with $1" >&2
	return 1
}

case "$1" in
  start)
		if check_root "$*"
		then 
	        sudo -u ${SPEAKERMAN_USER} $0 as_user start
			exit 0
		fi
 	;;
  stop)
		if check_root "$*" 
		then 
	        sudo -u ${SPEAKERMAN_USER} $0 as_user stop
			exit 0
		fi
	;;
  as_user)
		if [ "$USER" != "${SPEAKERMAN_USER}" ]
		then 
			echo "$0: Wrong user $USER instead of $SPEAKERMAN_USER"
			exit 1
		fi
		case "$2" in 
			start)
				ACTION="start"
			;;
			stop)
				ACTION="stop"
			;;
		esac
	;;
  *)
	ACTION=
	;;
esac

if [ "" == "$ACTION" ]
then
	echo "Usage (as root): $0 (start|stop)" >&2
	exit 3
fi

# $1 PROGRAM
executable()
{
	# If which is not available then we must be running before
	# /usr is mounted on a system that has which in /usr/bin/.
	# Conclude that $1 is not executable.
	[ -x /bin/which ] || [ -x /usr/bin/which ] || return 1
	which "$1" >/dev/null 2>&1
}

PATH="usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
if ! executable "$JACK_EXECUTABLE"
then
	echo "Cannot find $JACK_EXECUTABLE" >&2
	return 1
fi

if executable "$SPEAKERMAN_EXECUTABLE_NAME"
then
	SPEAKERMAN_EXECUTABLE=`which "$SPEAKERMAN_EXECUTABLE_NAME"`
else
	echo "Cannot find $SPEAKERMAN_EXECUTABLE_NAME" >&2
	return 1
fi

JACK_COMMAND="${JACK_EXECUTABLE} -p$JACK_PORTS -dalsa -dhw:${JACK_CARD} -r${JACK_RATE} -p${JACK_SAMPLES_PERIOD} -n${JACK_PERIODS}"

# $1: Executable name
# $2: signal
exec_signal() {
	PIDS=`pidof "$1"`
	if [ "$PIDS" == "" ] 
	then
		return 0
	fi
	if ! kill -$2 $PIDS
	then
		echo "Couldn't kill all processes ($1) with kill -$2 $PIDS" >&2
		return 1
	fi
}

# $1: Executable name
exec_await_terminated()
{
	ATTEMPT="0"
	PIDS=`pidof "$1"`
	while [ "$PIDS" != "" ]
	do
		sleep 1
		ATTEMPT=$(($ATTEMPT + 1))
		if [ $ATTEMPT -ge 2 ]
		then	
			return 1
		fi
		PIDS=`pidof "$1"`
	done
}

# $1: Executable name
exec_kill() {
	if ! executable "$1"
	then
		echo "Cannot find $1" >&2
		return 1
	fi
	if ! exec_signal "$1" TERM 
	then
		return 1
	fi
	if exec_await_terminated "$1"
	then
		return 0
	fi
	if ! exec_signal "$1" KILL
	then
		return 1
	fi
	if ! exec_await_terminated "$1"
	then
		return 1
	fi
}

jack_active() {
	if jack_wait -w -t 2 | grep -Ei '^timeout'
	then
		echo "Jack not active"
		return 1
	fi
	return 0;
}

jack_kill() {
	if ! exec_kill "$JACK_EXECUTABLE"
	then
		return 1
	fi	
}

jack_activate() {
	if ! jack_kill
	then
		return 1
	fi
	echo "Executing $JACK_COMMAND"
	date >> "$JACK_LOG"
	nohup $JACK_COMMAND 2>&1 >> "$JACK_LOG" &

	if jack_wait -w -t 2 | grep -Ei '^timeout'
	then
		echo "Jack not active"
		return 1
	fi
	echo 'Jack activated!'
	return 0
}

speakerman_activate() {
	if ! exec_kill "$SPEAKERMAN_EXECUTABLE"
	then
		return 1
	fi	
	echo "Executing $SPEAKERMAN_EXECUTABLE"
	date >> "$SPEAKERMAN_LOG"
	nohup $SPEAKERMAN_EXECUTABLE 2>&1 >>"$SPEAKERMAN_LOG" &

	ATTEMPT="0"
	while ! wget --quiet "http://localhost:8088" 
	do
		sleep 1
		ATTEMPT=$(($ATTEMPT + 1))
		if [ $ATTEMPT -ge 3 ]
		then	
			return 1
		fi
	done
	return 0
}

echo "Uitvoeren actie $ACTION"
export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/dbus/system_bus_socket"
if [ "$ACTION" == "start" ]
then
	if jack_activate && speakerman_activate
	then
		echo "Started"
	fi
else
	if exec_kill "$SPEAKERMAN_EXECUTABLE" 
	then
		jack_kill
	else
		exit 1
	fi
fi
